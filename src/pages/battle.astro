---
import BaseLayout from '../layouts/BaseLayout.astro'
---

<BaseLayout title='Battle | Oct 12th'>
	<section class='container'>
		<div class='controls'>
			<h1 class='heading'>Day 12 Battle</h1>
			<div id='score'>Score: 0</div>
			<div id='game-over' class='hidden'>Game Over! Tap to Restart</div>
		</div>
		<canvas id='gameCanvas'></canvas>
		<div class='mobile-controls'>
			<button id='btn-left' class='control-btn'>‚Üê</button>
			<button id='btn-shoot' class='control-btn shoot'>FIRE</button>
			<button id='btn-right' class='control-btn'>‚Üí</button>
		</div>
	</section>
</BaseLayout>

<style>
	.controls {
		display: flex;
		flex-direction: column;
		gap: var(--spacing-3xs);
		padding-bottom: var(--spacing-m);
	}
	#score {
		font-size: var(--text-step--1);
		font-weight: bold;
	}

	#game-over {
		color: var(--lavender-400);
		font-size: var(--text-step--1);
		font-weight: bold;
	}

	.hidden {
		display: none;
	}

	#gameCanvas {
		border: 4px double var(--lavender-200);
		background: var(--black-900);
		display: block;
		max-width: 100%;
		height: auto;
		touch-action: none;
	}

	.mobile-controls {
		display: flex;
		gap: var(--spacing-s);
		margin-top: var(--spacing-l);
		justify-content: center;
		width: 100%;
		max-width: 400px;
	}

	.control-btn {
		flex: 1;
		padding: var(--spacing-xs);
		font-size: var(--text-step-0);
		background: var(--black-400);
		color: var(--white-300);
		border: 2px solid var(--black-200);
		border-radius: var(--spacing-3xs);
		cursor: pointer;
		user-select: none;
		-webkit-user-select: none;
		touch-action: manipulation;
	}

	.control-btn:active {
		background: var(--black-200);
		transform: scale(0.95);
	}

	.control-btn.shoot {
		background: var(--lime-500);
		border-color: var(--lime-600);
		color: var(--black-500);
		font-weight: bold;
	}

	.control-btn.shoot:active {
		background: var(--lime-700);
	}

	@media (min-width: 800px) {
		.controls {
			flex-direction: row;
			gap: var(--spacing-l);
			padding-bottom: var(--spacing-3xs);
		}
		.mobile-controls {
			display: none;
		}
	}
</style>
<script>
	function initGame() {
		const canvas = document.getElementById(
			'gameCanvas'
		) as HTMLCanvasElement
		const ctx = canvas.getContext('2d')!
		const scoreElement = document.getElementById('score')!
		const gameOverElement = document.getElementById('game-over')!
		const btnLeft = document.getElementById('btn-left')!
		const btnRight = document.getElementById('btn-right')!
		const btnShoot = document.getElementById('btn-shoot')!

		const isMobile = window.innerWidth < 800
		canvas.width = isMobile ? Math.min(window.innerWidth - 40, 400) : 800
		canvas.height = isMobile ? Math.min(window.innerHeight - 280, 500) : 600

		let score = 0
		let gameOver = false
		let enemies: Enemy[] = []
		let bullets: Bullet[] = []
		let animationId: number
		let enemyDirection = 1

		const player = {
			x: canvas.width / 2,
			y: isMobile ? canvas.height - 10 : canvas.height - 20,
			width: 40,
			height: 40,
			speed: isMobile ? 4 : 5,
			emoji: 'ü¶∏',
		}

		const enemyEmojis = ['üëΩ', 'üëª', 'üéÉ', 'üëπ', 'üíÄ', 'ü§°', 'üßõ', 'üßü']

		const keys: { [key: string]: boolean } = {}
		let mobileLeft = false
		let mobileRight = false

		class Enemy {
			x: number
			y: number
			width = isMobile ? 20 : 30
			height = isMobile ? 20 : 30
			emoji: string

			constructor(x: number, y: number) {
				this.x = x
				this.y = y
				this.emoji =
					enemyEmojis[Math.floor(Math.random() * enemyEmojis.length)]
			}

			draw() {
				ctx.font = `${this.width}px sans-serif`
				ctx.fillText(this.emoji, this.x, this.y)
			}
		}

		class Bullet {
			x: number
			y: number
			speed: number

			constructor(x: number, y: number, speed: number) {
				this.x = x
				this.y = y
				this.speed = speed
			}

			draw() {
				ctx.fillStyle = '#C0DE12'
				ctx.fillRect(this.x - 2, this.y, 4, 15)
			}

			update() {
				this.y -= this.speed
			}
		}

		function createEnemies() {
			enemies = []
			const rows = 4
			const cols = 8
			const startX = isMobile ? 5 : 100
			const startY = 15
			const colSpacing = isMobile ? (canvas.width - 110) / (cols - 1) : 80
			const rowSpacing = isMobile ? 30 : 50

			for (let row = 0; row < rows; row++) {
				for (let col = 0; col < cols; col++) {
					enemies.push(
						new Enemy(
							startX + col * colSpacing,
							startY + row * rowSpacing
						)
					)
				}
			}
		}

		function moveEnemies() {
			let shouldMoveDown = false

			for (const enemy of enemies) {
				enemy.x += enemyDirection * (isMobile ? 1 : 2)

				if (enemy.x <= 0 || enemy.x + enemy.width >= canvas.width) {
					shouldMoveDown = true
				}
			}

			if (shouldMoveDown) {
				enemyDirection *= -1
				for (const enemy of enemies) {
					enemy.y += isMobile ? 30 : 40

					if (enemy.y >= player.y - player.height) {
						gameOver = true
					}
				}
			}
		}

		function checkCollisions() {
			for (let i = bullets.length - 1; i >= 0; i--) {
				for (let j = enemies.length - 1; j >= 0; j--) {
					if (
						bullets[i] &&
						enemies[j] &&
						bullets[i].x > enemies[j].x &&
						bullets[i].x < enemies[j].x + enemies[j].width &&
						bullets[i].y > enemies[j].y - enemies[j].height &&
						bullets[i].y < enemies[j].y
					) {
						enemies.splice(j, 1)
						bullets.splice(i, 1)
						score += 10
						scoreElement.textContent = `Score: ${score}`
						break
					}
				}
			}

			for (const enemy of enemies) {
				if (
					enemy.x < player.x + player.width / 2 &&
					enemy.x + enemy.width > player.x - player.width / 2 &&
					enemy.y > player.y - player.height &&
					enemy.y - enemy.height < player.y
				) {
					gameOver = true
				}
			}

			if (enemies.length === 0) {
				createEnemies()
			}
		}

		function update() {
			if (gameOver) {
				gameOverElement.classList.remove('hidden')
				return
			}
			ctx.fillStyle = '#0E0B0B'
			ctx.fillRect(0, 0, canvas.width, canvas.height)

			if (
				(keys['ArrowLeft'] || mobileLeft) &&
				player.x > player.width / 2
			) {
				player.x -= player.speed
			}
			if (
				(keys['ArrowRight'] || mobileRight) &&
				player.x < canvas.width - player.width / 2
			) {
				player.x += player.speed
			}

			ctx.font = `${player.width}px`
			ctx.fillText(player.emoji, player.x - player.width / 2, player.y)

			bullets = bullets.filter((bullet) => {
				bullet.update()
				bullet.draw()
				return bullet.y > 0
			})

			if (enemies.length > 0) {
				moveEnemies()
			}
			for (const enemy of enemies) {
				enemy.draw()
			}
			checkCollisions()

			animationId = requestAnimationFrame(update)
		}

		function restart() {
			cancelAnimationFrame(animationId)
			score = 0
			gameOver = false
			bullets = []
			enemyDirection = 1
			player.x = canvas.width / 2
			scoreElement.textContent = 'score: 0'
			gameOverElement.classList.add('hidden')
			createEnemies()
			animationId = requestAnimationFrame(update)
		}

		function shoot() {
			if (!gameOver) {
				bullets.push(new Bullet(player.x, player.y - player.height, 7))
			}
		}

		const handleKeyDown = (e: KeyboardEvent) => {
			keys[e.key] = true

			if (e.key === ' ') {
				e.preventDefault()
				shoot()
			}

			if (e.key === 'r' || e.key === 'R') {
				restart()
			}
		}

		const handleKeyUp = (e: KeyboardEvent) => {
			keys[e.key] = false
		}

		const handleLeftDown = () => {
			mobileLeft = true
		}
		const handleLeftUp = () => {
			mobileLeft = false
		}
		const handleRightDown = () => {
			mobileRight = true
		}
		const handleRightUp = () => {
			mobileRight = false
		}

		window.addEventListener('keydown', handleKeyDown)
		window.addEventListener('keyup', handleKeyUp)

		btnLeft.addEventListener('touchstart', handleLeftDown)
		btnLeft.addEventListener('mousedown', handleLeftDown)
		btnLeft.addEventListener('touchend', handleLeftUp)
		btnLeft.addEventListener('mouseup', handleLeftUp)

		btnRight.addEventListener('touchstart', handleRightDown)
		btnRight.addEventListener('mousedown', handleRightDown)
		btnRight.addEventListener('touchend', handleRightUp)
		btnRight.addEventListener('mouseup', handleRightUp)

		btnShoot.addEventListener('click', shoot)
		btnShoot.addEventListener('touchstart', (e) => {
			e.preventDefault()
			shoot()
		})

		gameOverElement.addEventListener('click', restart)
		gameOverElement.addEventListener('touchstart', restart)

		const cleanup = () => {
			cancelAnimationFrame(animationId)
			window.removeEventListener('keydown', handleKeyDown)
			window.removeEventListener('keyup', handleKeyUp)
			btnLeft.removeEventListener('touchstart', handleLeftDown)
			btnLeft.removeEventListener('mousedown', handleLeftDown)
			btnLeft.removeEventListener('touchend', handleLeftUp)
			btnLeft.removeEventListener('mouseup', handleLeftUp)
			btnRight.removeEventListener('touchstart', handleRightDown)
			btnRight.removeEventListener('mousedown', handleRightDown)
			btnRight.removeEventListener('touchend', handleRightUp)
			btnRight.removeEventListener('mouseup', handleRightUp)
		}

		createEnemies()
		update()
		return cleanup
	}

	let cleanup: (() => void) | null = null
	cleanup = initGame()

	document.addEventListener('astro:before-swap', () => {
		if (cleanup) cleanup()
	})
	document.addEventListener('astro:after-swap', () => {
		cleanup = initGame()
	})
</script>
